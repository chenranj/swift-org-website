- header: 概述
  pages:
  - title: 语言参考
    url: /documentation/tspl/
    description: |
      Swift 编程语言(TSPL)书籍是 Swift 的权威参考,
      提供了语言的导览、全面指南和正式参考。
  - title: API 设计指南
    url: /documentation/api-design-guidelines/
    description: |
      在编写 Swift 代码时提供清晰一致的开发者体验很大程度上取决于 API 中出现的名称和用法。
      这些设计指南解释了如何确保你的代码能够成为更大的 Swift 生态系统的一部分。
  - title: 标准库
    url: /documentation/standard-library/
    description: |
      Swift 标准库为编写 Swift 程序定义了基础层功能。
  - title: 核心库
    url: /documentation/core-libraries/
    description: |
      Swift 核心库项目提供了比 Swift 标准库更高层次的功能。
      这些库提供了开发者可以在所有 Swift 支持的平台上依赖的强大工具。
  - title: 包管理器
    url: /documentation/package-manager/
    description: |
      Swift 包管理器是一个用于管理 Swift 代码"包"的分发和使用的工具。
      它与 Swift 构建系统集成,可以自动完成下载、编译和链接依赖项到目标产品的过程。
  - title: REPL 和调试器
    url: /documentation/lldb/
    description: |
      LLDB 调试器为 Swift 语言提供了丰富的 REPL 以及调试环境。
  - title: 关于 Swift
    url: /about/
    description: |
      Swift 核心特性、支持的平台和开源项目的总结。
#----------------------------------------------------
- header: 文章
  pages:
  - title: Swift 服务器端
    url: /documentation/server/
    description: |
      Swift 是一种通用编程语言,具有独特的特性,使其特别适合服务器应用程序。
  - title: 嵌入式开发
    url: /getting-started/embedded-swift/
    description: |
      Swift 嵌入式开发介绍。了解如何开始。
  - title: 混合 Swift 和 C++
    url: /documentation/cxx-interop/
    description: |
      Swift 支持与 C++ 的双向互操作性。
      大量的 C++ API 可以直接从 Swift 调用,部分 Swift API 也可以从 C++ 使用。
  - title: 值类型和引用类型
    url: /documentation/articles/value-and-reference-types.html
    description: |
      Swift 中的类型分为两类:值类型和引用类型。
      它们的行为不同,理解这种差异是理解 Swift 的重要组成部分。
  - title: DocC
    url: /documentation/docc/
    description: |
      DocC 是一个文档编译器,可以让你轻松为 Swift 框架和包生成文档。
      编译器通过结合源代码中的注释以及与包源代码一起存在的扩展文件、文章和教程来构建文档。
  - title: 启用完整并发检查
    url: /documentation/concurrency/
    description: |
        通过在 SwiftPM 包、Xcode 项目和 CI 脚本中启用完整并发检查,为 Swift 6 做准备。
  - title: 静态 Linux SDK 入门
    url: /documentation/articles/static-linux-getting-started.html
    description: |
      了解如何开始构建无系统依赖(甚至不需要 Swift 运行时或 C 库)的 Linux 二进制文件。
      更好的是,你可以在任何安装了 Swift 工具链的系统上完成这项工作,允许你在 macOS 或 Windows 上开发,并在投入生产时轻松部署到 Linux。
#----------------------------------------------------
- header: 贡献
  pages:
  - title: Swift 演进
    url: /swift-evolution/
    description: |
      Swift 演进管理着如何将变更引入 Swift 语言。
      该过程详细说明了想法如何被提出、讨论、审查并最终被接受到即将发布的版本中。
  - title: 源代码
    url: /documentation/source-code/
    description: |
      Swift 项目的代码被分成几个开源仓库,全部托管在 GitHub.com 上。
  - title: 持续集成
    url: /documentation/continuous-integration/
    description: |
      Swift.org CI 系统生成发布在 swift.org 上的快照构建,并对活跃分支运行测试。
      它也被用作审查过程的一部分,在提交拉取请求之前对其运行测试。
  - title: 源代码兼容性
    url: /documentation/source-compatibility/
    description: |
      源代码兼容性测试套件是一个社区拥有的资源,旨在通过针对 Swift 源代码集合进行构建来测试编译器的回归。
  - title: 编译器架构
    url: /documentation/swift-compiler/
    description: |
      Swift 编译器架构概述。
